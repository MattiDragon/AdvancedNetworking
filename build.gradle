plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version + "+mc." + project.minecraft_version
group = project.maven_group
base.archivesName = project.archives_base_name

loom.splitEnvironmentSourceSets()

repositories {
    mavenLocal()
    maven {
        url "https://kneelawk.com/maven/"
        content {
            includeGroup "com.kneelawk"
        }
    }
    maven {
        url "https://maven.alexiil.uk/"
        content {
            includeGroup "alexiil.mc.lib"
        }
    }
    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.mattidragon"
            includeGroup "com.github.llamalad7.mixinextras"
        }
    }
    maven {
        url "https://maven.isxander.dev/releases"
        content {
            includeGroup "dev.isxander.yacl"
        }
    }
    maven {
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url 'https://maven.cafeteria.dev/releases/'
        content {
            includeGroup "me.luligabi"
        }
    }
    maven {
        url "https://maven.terraformersmc.com"
        content {
            includeGroup "com.terraformersmc"
        }
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        content {
            includeGroup "com.twelvemonkeys.common"
            includeGroup "com.twelvemonkeys.imageio"
            includeGroup "com.twelvemonkeys"
        }
    }
    maven {
        url 'https://maven.quiltmc.org/repository/release/'
        content {
            includeGroup "org.quiltmc.parsers"
        }
    }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"

    // Core apis
    modImplementation include("com.github.mattidragon:nodeflow:$nodeflow_version")
    modImplementation include("com.kneelawk:graphlib:$graphlib_version")
    include modApi("teamreborn:energy:$energy_version") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Config
    modImplementation "com.terraformersmc:modmenu:$modmenu_version"
    modImplementation include("dev.isxander.yacl:yet-another-config-lib-fabric:$yacl_version")
    modImplementation annotationProcessor(include("com.github.mattidragon:configtoolkit:$configtoolkit_version"))

    modImplementation include("me.luligabi:NoIndium:$noindium_version")

    // Add generated data to runtime classpath (slightly hacky)
    runtimeOnly files("src/main/generated")
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        compileClasspath += main.output
        runtimeClasspath += main.runtimeClasspath
        runtimeClasspath += main.output
    }
}

loom {
    runs {
        testmodClient {
            client()
            name "Testmod Client"
            source sourceSets.testmod
            runDir "run/test"
        }
        testmodServer {
            server()
            name "Testmod Server"
            source sourceSets.testmod
            runDir "run/test_server"
        }
        gametest {
            server()
            name "Gametest"
            source sourceSets.testmod
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.layout.buildDirectory}/junit.xml"
            runDir "build/gametest_server"
        }
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated = true

            runDir "build/datagen/"
        }
    }

    // Apply datagen at runtime
    mods {
        extended_drawers {
            sourceSet sourceSets.main
            modFiles.from file("src/main/generated")
        }
    }

    accessWidenerPath = file("src/main/resources/advanced_networking.accesswidener")
}

test.dependsOn(tasks.runGametest)

// Delete datagen on clean
clean.delete("src/main/generated")

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    // Copy datagen to jar
    dependsOn tasks.runDatagen
    from("src/main/generated") {
        exclude "README.md"
        exclude ".cache"
    }
}

publishing {
    publications.register("mavenJava", MavenPublication) {
        from components.java
    }

    repositories {

    }
}
